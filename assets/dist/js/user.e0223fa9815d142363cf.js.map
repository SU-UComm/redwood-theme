{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/decanter/core/src/js/core/core.js","webpack:///./node_modules/decanter/core/src/js/components/accordion/accordion.js","webpack:///./assets/js/user/comment_form.js","webpack:///./node_modules/decanter/core/src/js/components/main-nav/globals.js","webpack:///./node_modules/decanter/core/src/js/utilities/keyboard.js","webpack:///./node_modules/decanter/core/src/js/utilities/events.js","webpack:///./node_modules/decanter/core/src/js/components/main-nav/NavItem.js","webpack:///./node_modules/decanter/core/src/js/components/main-nav/Nav.js","webpack:///./node_modules/decanter/core/src/js/components/main-nav/main-nav.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/globals.js","webpack:///./node_modules/decanter/core/src/js/components/nav/ActivePath.js","webpack:///./node_modules/decanter/core/src/js/components/nav/EventHandlerDispatch.js","webpack:///./node_modules/decanter/core/src/js/components/nav/ElementFetcher.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/EventAbstract.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnEsc.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnSpace.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/SecondaryNavAbstract.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnHome.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnArrowDown.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnEnd.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnArrowUp.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnArrowLeft.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnArrowRight.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnEnter.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/events/OnTab.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/common/SecondaryNavItem.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/accordion/events/OnClick.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/accordion/events/OnSpace.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/accordion/events/OnArrowRight.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/accordion/events/OnArrowLeft.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/accordion/SecondarySubNavAccordion.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/accordion/SecondaryNavAccordion.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/secondary-nav-accordion.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/SubNavToggleClick.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/SubNavToggleSpace.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/SubNavToggleArrowDown.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/SubNavToggleArrowLeft.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/SubNavToggleArrowUp.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/SubNavToggle.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/OnTab.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/events/OnArrowRight.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/SecondarySubNavButtons.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/buttons/SecondaryNavButtons.js","webpack:///./node_modules/decanter/core/src/js/components/secondary-nav/secondary-nav-buttons.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NodeList","forEach","Array","setExpanded","x","setAttribute","setHidden","accordions","document","querySelectorAll","titleButtons","expandButtons","collapseButtons","addEventListener","event","acc","classList","remove","btn","parentNode","nextElementSibling","e","getAttribute","expandBtn","closestBtns","closest","closestBtn","collapseBtn","postComments","querySelector","commentList","replyButtons","replyForms","length","innerHTML","add","closeAllSubNavs","theSubNavs","subNav","closeSubNav","closeAllMobileNavs","theNavs","theNav","closeMobileNav","isHome","theKey","isEnd","isTab","isEsc","isSpace","isEnter","isLeftArrow","isRightArrow","isUpArrow","isDownArrow","createEvent","eventName","data","Event","ev","initEvent","NavItem","item","nav","this","link","isSubNavTrigger","Nav","openEvent","closeEvent","push","items","indexOf","lastElementChild","tagName","toUpperCase","isSubNav","focusOnFirst","focusOn","dispatchEvent","focusOnTrigger","isExpanded","focus","isSubNavItem","elem","handler","window","type","charAt","slice","target","srcElement","keyCode","preventDefault","stopPropagation","openSubNav","location","isDesktopNav","getParentNav","shifted","shiftKey","isLastItem","isFirstItem","topNav","getTopNav","toggle","toggleText","innerText","getComputedStyle","display","getFirstItem","getLastItem","currentItem","currentIndex","lastIndex","getFirstLink","getLastLink","Number","isInteger","openMobileNav","isTopNav","firstZindex","navClass","index","zIndex","style","matches","secondaryNavs","ActivePath","element","options","itemActiveClass","itemActiveTrailClass","itemExpandedClass","path","pathname","anchor","hash","query","search","val","actives","expandActivePathItem","EventHandlerDispatch","createEventListeners","eventMethod","onKeydown","onClick","callEvent","normalized","map","home","end","tab","escape","space","enter","arrowLeft","arrowRight","arrowUp","arrowDown","entries","entry","normalizeKey","eventRegistry","init","ElementFetcher","what","firstElementChild","firstChild","previousElementSibling","node","err","EventAbstract","masterNav","parentNav","isOnTarget","validate","exec","context","fetch","OnEsc","getDepth","getElement","OnSpace","SecondaryNavAbstract","assign","itemClass","itemParentClass","createEventRegistry","dispatch","activePath","setActivePath","navItems","subNavItems","parentItemSelector","navItemSelector","registryDefaults","onKeydownEscape","onKeydownSpace","parentItems","leafItems","createParentItems","createNavItems","depth","parentMenu","itemLink","nextDepth","newParentItem","newNavItem","OnHome","OnArrowDown","OnEnd","OnArrowUp","OnArrowLeft","nestedLeft","firstLevelLeft","OnArrowRight","OnEnter","OnTab","firstItem","lastItem","SecondaryNavItem","onKeydownHome","onKeydownEnd","onKeydownTab","onKeydownEnter","onKeydownArrowUp","onKeydownArrowRight","onKeydownArrowDown","onKeydownArrowLeft","OnClick","blur","NavItemOnArrowLeft","SecondarySubNavAccordion","SecondaryNavAccordion","createSubNavItems","expandActivePath","parent","opts","className","match","SubNavToggleClick","SubNavToggleSpace","SubNavToggleArrowDown","SubNavToggleArrowLeft","SubNavToggleArrowUp","SubNavToggle","toggleElement","SecondarySubNavButtons","toggleClass","toggleLabel","subNavToggleText","createToggleButton","insertBefore","createElement","label","createTextNode","id","Math","random","toString","substr","appendChild","SecondaryNavButtons"],"mappings":"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","file":"user.e0223fa9815d142363cf.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","// if NodeList doesn't support forEach, use Array's forEach()\nNodeList.prototype.forEach = NodeList.prototype.forEach || Array.prototype.forEach;\n","const accordions = document.querySelectorAll('.su-accordion');\nconst titleButtons = document.querySelectorAll('.su-accordion__button');\nconst expandButtons = document.querySelectorAll('.su-accordion__expand-all');\nconst collapseButtons = document.querySelectorAll('.su-accordion__collapse-all');\n\nconst isExpanded = x => x.getAttribute('aria-expanded') === 'true';\nconst setExpanded = (x, value) => x.setAttribute('aria-expanded', value);\nconst setHidden = (x, value) => x.setAttribute('aria-hidden', value);\n\ndocument.addEventListener('DOMContentLoaded', event => {\n  Array.prototype.forEach.call(accordions, acc => {\n    acc.classList.remove('no-js');\n  });\n\n  Array.prototype.forEach.call(titleButtons, btn => {\n    setExpanded(btn, 'false');\n    setHidden(btn.parentNode.nextElementSibling, 'true');\n  });\n});\n\nArray.prototype.forEach.call(titleButtons, btn => {\n  btn.addEventListener('click', function (e) {\n    if (!isExpanded(btn)) {\n      setExpanded(btn, 'true');\n      setHidden(btn.parentNode.nextElementSibling, 'false');\n    } else {\n      setExpanded(btn, 'false');\n      setHidden(btn.parentNode.nextElementSibling, 'true');\n    }\n  }, false);\n});\n\nArray.prototype.forEach.call(expandButtons, expandBtn => {\n  expandBtn.addEventListener('click', function (e) {\n    const closestAccordion = expandBtn.closest('.su-accordion');\n    const closestBtns = closestAccordion.querySelectorAll('.su-accordion__button');\n    Array.prototype.forEach.call(closestBtns, closestBtn => {\n      setExpanded(closestBtn, 'true');\n      setHidden(closestBtn.parentNode.nextElementSibling, 'false');\n    });\n  }, false);\n});\n\nArray.prototype.forEach.call(collapseButtons, collapseBtn => {\n  collapseBtn.addEventListener('click', function (e) {\n    const closestAccordion = collapseBtn.closest('.su-accordion');\n    const closestBtns = closestAccordion.querySelectorAll('.su-accordion__button');\n    Array.prototype.forEach.call(closestBtns, closestBtn => {\n      setExpanded(closestBtn, 'false');\n      setHidden(closestBtn.parentNode.nextElementSibling, 'true');\n    });\n  }, false);\n});\n","const postComments = document.querySelector( '.post__comments' );\nif ( postComments != null ) {\n  const commentList = postComments.querySelector( '.comment__list' );\n  const replyButtons = commentList.querySelectorAll( '.comment__reply' );\n  const replyForms = commentList.querySelectorAll( '.comment__reply-form' );\n\n  const isExpanded = x => x.getAttribute( 'aria-expanded' ) === 'true';\n  const setExpanded = ( x, value ) => x.setAttribute( 'aria-expanded', value );\n  const setHidden = ( x, value ) => x.setAttribute( 'aria-hidden', value );\n\n  document.addEventListener( 'DOMContentLoaded', event => {\n    postComments.classList.remove( 'no-js' );\n\n    for ( let i = 0; i < replyForms.length; i++ ) {\n      replyForms[ i ].setAttribute( 'aria-hidden', true );\n    }\n  } );\n\n  for ( let i = 0; i < replyButtons.length; i++ ) {\n    replyButtons[ i ].addEventListener( 'click', function ( e ) {\n\n      if ( !isExpanded( replyButtons[ i ] ) ) {\n        setExpanded( replyButtons[ i ], 'true' );\n        replyButtons[ i ].innerHTML = 'Close reply form';\n        replyButtons[ i ].classList.add( 'comment__reply-close' );\n        setHidden( replyForms[ i ], 'false' );\n      } else {\n        setExpanded( replyButtons[ i ], 'false' );\n        replyButtons[ i ].innerHTML = replyForms[ i ].querySelector( 'h3' ).innerHTML;\n        replyButtons[ i ].classList.remove( 'comment__reply-close' );\n        setHidden( replyForms[ i ], 'true' );\n      }\n    }, false );\n  }\n}\n","// ---------------------------------------------------------------------------\n// Global variables and functions shared amongst the nav code\n// ---------------------------------------------------------------------------\n\n// Variables\n\n/**\n *  Global record of all main navs on the page\n *  - populated in the document.ready function in main-nav.js\n *  - used by closeAllMobileNavs\n * @type {Array}\n */\nexport var theNavs = [];\n\n/**\n *  Global record of all sub navs on the page (may be in different main navs\n *  - populated by the NavItem constructor\n *  - used by closeAllSubNavs\n * @type {Array}\n */\nexport var theSubNavs = [];\n\n// Functions\n\n/**\n * Close all subnavs on the page\n */\nexport const closeAllSubNavs = () => {\n  theSubNavs.forEach(\n    subNav => { subNav.closeSubNav(); }\n  );\n};\n\n/**\n * Close all mobile navs on the page\n */\nexport const closeAllMobileNavs = () => {\n  theNavs.forEach(\n    theNav => { theNav.closeMobileNav(); }\n  );\n};\n","// ---------------------------------------------------------------------------\n// Keyboard helper functions\n// ---------------------------------------------------------------------------\n\nexport const isHome = theKey => (theKey === 'Home' || theKey === 122);\nexport const isEnd = theKey => (theKey === 'End' || theKey === 123);\nexport const isTab = theKey => (theKey === 'Tab' || theKey === 9);\nexport const isEsc = theKey => (theKey === 'Escape' || theKey === 'Esc' || theKey === 27);\nexport const isSpace = theKey => (theKey === ' ' || theKey === 'Spacebar' || theKey === 32);\nexport const isEnter = theKey => (theKey === 'Enter' || theKey === 13);\nexport const isLeftArrow = theKey => (theKey === 'ArrowLeft' || theKey === 'Left' || theKey === 37);\nexport const isRightArrow = theKey => (theKey === 'ArrowRight' || theKey === 'Right' || theKey === 39);\nexport const isUpArrow = theKey => (theKey === 'ArrowUp' || theKey === 'Up' || theKey === 38);\nexport const isDownArrow = theKey => (theKey === 'ArrowDown' || theKey === 'Down' || theKey === 40);\n\n/**\n * Return a consistent string for each key validation.\n *\n * @param {*} theKey the code from a keypress event.\n *\n * @return {String} A string name for the key that was pressed.\n */\nexport const normalizeKey = (theKey) => {\n\n  // Key Value Map of the normalized string and the check function.\n  const map = {\n    home: isHome,\n    end: isEnd,\n    tab: isTab,\n    escape: isEsc,\n    space: isSpace,\n    enter: isEnter,\n    arrowLeft: isLeftArrow,\n    arrowRight: isRightArrow,\n    arrowUp: isUpArrow,\n    arrowDown: isDownArrow\n  };\n\n  // Loop through the key/val object and run the check function (val) in order\n  // to return the normalized string (key)\n  for (var entry of Object.entries(map)) {\n    if (entry[1](theKey)) {\n      return entry[0];\n    }\n  }\n\n  return false;\n};\n","/**\n * Create an event with the specified name in a browser-agnostic way.\n *\n * @param {string} eventName - the name of the event\n * @param {Object} data - Additional data along with the event.\n *\n * @return {Event} - instance of event which can be dispatched / listened for\n */\nexport const createEvent = (eventName, data) => {\n  if (typeof eventName !== 'string' || eventName.length <= 0) {\n    return null;\n  }\n  // Modern browsers.\n  if (typeof Event == 'function') {\n    return new Event(eventName, data);\n  }\n  // IE\n  else {\n    let ev = document.createEvent('UIEvent');\n    ev.initEvent(eventName, true, true, data);\n    return ev;\n  }\n};\n","import {theSubNavs, closeAllSubNavs} from './globals';\nimport {\n  isHome,\n  isEnd,\n  isTab,\n  isSpace,\n  isEnter,\n  isLeftArrow,\n  isRightArrow,\n  isUpArrow,\n  isDownArrow\n} from '../../utilities/keyboard';\nimport Nav from './Nav';\nimport {createEvent} from '../../utilities/events';\n\n/**\n * Represent an item in a navigation menu. May be a direct link or a subnav\n * trigger.\n *\n * @prop {HTMLLIElement}   item   - the <li> in the DOM that is the NavItem\n * @prop {HTMLElement|Nav} nav    - the Nav that contains the element.\n *                                  May be a main nav (<nav>) or subnav (Nav).\n * @prop {HTMLLIElement}   link   - the <a> in the DOM that is contained in\n *                                  item (the <li>).\n * @prop {Nav}             subNav - if item is the trigger for a subnav, this\n *                                  is an instonce Nav that models the subnav.\n */\nexport default class NavItem {\n\n  /**\n   * Create a NavItem\n   * @param {HTMLLIElement}   item  - The <li> that is the NavItem in the DOM.\n   * @param {HTMLElement|Nav} nav   - The Nav that contains the element. May\n   *                                  be a main nav (<nav>) or a subnav (Nav).\n   */\n  constructor(item, nav) {\n    this.item = item;\n    this.nav = nav;\n    this.link = this.item.querySelector('a');\n    this.subNav = null;\n    this.item.addEventListener('keydown', this);\n\n    if (this.isSubNavTrigger()) {\n      this.subNav = new Nav(this);\n      // Add custom events to alert others when a subnav opens or closes.\n      // this.openEvent is dispatched in this.openSubNav().\n      this.openEvent = createEvent('openSubnav');\n      // this.closeEvent is dispatched in this.closeSubNav().\n      this.closeEvent = createEvent('closeSubnav');\n\n      // Maintain global list of subnavs for closeAllSubNavs().\n      theSubNavs.push(this);\n      this.item.addEventListener('click', this);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Helper Methods.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Is this the first item in the containing Nav?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is the first item.\n   */\n  isFirstItem() {\n    return this.nav.items.indexOf(this) === 0;\n  }\n\n  /**\n   * Is this the last item in the containing Nav?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is the last item.\n   */\n  isLastItem() {\n    return this.nav.items.indexOf(this) === (this.nav.items.length - 1);\n  }\n\n  /**\n   * Is this a trigger that opens / closes a subnav?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is the sub nav trigger item.\n   */\n  isSubNavTrigger() {\n    return this.item.lastElementChild.tagName.toUpperCase() === 'UL';\n  }\n\n  /**\n   * Is this a component of a subnav - either the trigger or a nav item?\n   *\n   * @return {Boolean}\n   *  Wether or not the item is a subnav item.\n   */\n  isSubNavItem() {\n    return (this.isSubNavTrigger() || this.nav.isSubNav());\n  }\n\n  /**\n   * Is this expanded? Can only return TRUE if this is a subnav trigger.\n   *\n   * @return {Boolean}\n   *  Wether or not the item is expanded.\n   */\n  isExpanded() {\n    return this.link.getAttribute('aria-expanded') === 'true';\n  }\n\n  /**\n   * Set whether or not this is expanded.\n   * Only meaningful if this is a subnav trigger.\n   *\n   * @param {String} value - What to set the aria-expanded attribute of this's\n   *                         link to.\n   */\n  setExpanded(value) {\n    this.link.setAttribute('aria-expanded', value);\n  }\n\n  // -------------------------------------------------------------------------\n  // Functional Methods.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handles the opening of a sub-nav.\n   *\n   * If this is a subnav trigger, open the corresponding subnav.\n   * Optionally force focus on the first element in the subnav\n   * (for keyboard nav).\n   *\n   * @param {Boolean} focusOnFirst - whether or not to also focus on the first\n   *                                 element in the subnav\n   */\n  openSubNav(focusOnFirst = true) {\n    closeAllSubNavs();\n\n    if (this.isSubNavTrigger()) {\n      this.item.classList.add('su-main-nav__item--expanded');\n      this.setExpanded('true');\n      if (focusOnFirst) {\n        this.subNav.focusOn('first');\n      }\n      this.item.dispatchEvent(this.openEvent);\n    }\n  }\n\n  /**\n   * Handles the closing of a subnav.\n   *\n   * If this is a subnav trigger or an item in a subnav, close the\n   * corresponding subnav. Optionally force focus on the trigger.\n   *\n   * @param {Boolean} focusOnTrigger - Whether or not to also focus on the\n   *                                 subnav's trigger.\n   */\n  closeSubNav(focusOnTrigger = false) {\n    if (this.isSubNavTrigger()) {\n      if (this.isExpanded()) {\n        this.item.classList.remove('su-main-nav__item--expanded');\n        this.setExpanded('false');\n        if (focusOnTrigger) {\n          this.link.focus();\n        }\n        this.item.dispatchEvent(this.closeEvent);\n      }\n    }\n    else if (this.isSubNavItem()) {\n      // This.nav.elem should be a subNavTrigger.\n      this.nav.elem.closeSubNav(focusOnTrigger);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Event Handlers.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handler for all events attached to an instance of this class. This method\n   * must exist when events are bound to an instance of a class\n   * (vs a function). This method is called for all events bound to an\n   * instance. It inspects the instance (this) for an appropriate handler\n   * based on the event type. If found, it dispatches the event to the\n   * appropriate handler.\n   *\n   * @param {KeyboardEvent} event - The keyboard event.\n   *\n   * @return {*}\n   *   Whatever the dispatched handler returns (in our case nothing)\n   */\n  handleEvent(event) {\n    event = event || window.event;\n\n    // If this class has an onEvent method (onClick, onKeydown) invoke it.\n    const handler = 'on'\n      + event.type.charAt(0).toUpperCase()\n      + event.type.slice(1);\n\n    if (typeof this[handler] === 'function') {\n      // The element that was clicked.\n      const target = event.target || event.srcElement;\n      return this[handler](event, target);\n    }\n  }\n\n  /**\n   * Handler for keydown events. keydown is bound to all NavItem's.\n   * Dispatched from this.handleEvent().\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   * @param {HTMLElement} target  - The HTML element target.\n   */\n  onKeydown(event, target) {\n    const theKey = event.key || event.keyCode;\n\n    // Handler for the space and enter key.\n    if (isSpace(theKey) || isEnter(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.isSubNavTrigger()) {\n        this.openSubNav();\n      }\n      else {\n        window.location = this.link;\n      }\n    }\n    // Handler for the down arrow key.\n    else if (isDownArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.nav.isDesktopNav()) {\n        if (this.isSubNavTrigger()) {\n          this.openSubNav();\n        }\n        else {\n          this.nav.focusOn('next', this);\n        }\n      }\n      else {\n        this.nav.focusOn('next', this);\n      }\n    }\n    // Handler for the up arrow key.\n    else if (isUpArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.nav.focusOn('prev', this);\n    }\n    // Handler for the left arrow key.\n    else if (isLeftArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.nav.isDesktopNav()) {\n        if (this.nav.isSubNav()) {\n          this.closeSubNav();\n          let parent = this.nav.getParentNav();\n          // Focus on the previous item in the parent nav.\n          parent.focusOn('prev', this.nav.elem);\n        }\n        else {\n          this.nav.focusOn('prev', this);\n        }\n      }\n      else {\n        if (this.isSubNavItem()) {\n          // Close the subnav and put the focus on the trigger.\n          this.closeSubNav(true);\n        }\n      }\n    }\n    // Handler for the right arrow key.\n    else if (isRightArrow(theKey)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.nav.isDesktopNav()) {\n        if (this.nav.isSubNav()) {\n          this.closeSubNav();\n          let parent = this.nav.getParentNav();\n          // Focus on the next item in the parent nav.\n          parent.focusOn('next', this.nav.elem);\n        }\n        else {\n          this.nav.focusOn('next', this);\n        }\n      }\n      else {\n        if (this.isSubNavTrigger()) {\n          this.openSubNav();\n        }\n      }\n    }\n    // Handler for the home key.\n    else if (isHome(theKey)) {\n      this.nav.focusOn('first');\n    }\n    // Handler for the end key.\n    else if (isEnd(theKey)) {\n      this.nav.focusOn('last');\n    }\n    // Handler for the tab key.\n    else if (isTab(theKey)) {\n      event.stopPropagation();\n      const shifted = event.shiftKey;\n      if (this.isSubNavItem()\n        && ((!shifted && this.isLastItem())\n          || (shifted && this.isFirstItem()))\n      ) {\n        this.closeSubNav(true);\n      }\n    }\n  }\n\n  /**\n   * Handler for click events.\n   *\n   * Dispatched from this.handleEvent().\n   * Click is only bound to subnav triggers. However, click bubbles up from\n   * subnav items to the trigger.\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   * @param {HTMLElement} target  - The HTML element target.\n   */\n  onClick(event, target) {\n    if (this.isExpanded()) {\n      this.closeSubNav();\n    }\n    else {\n      this.openSubNav(false);\n    }\n    // If the click is directly on the trigger, then we're done.\n    if (target === this.link) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n}\n","import {closeAllMobileNavs} from './globals';\nimport {isEsc, isSpace, isEnter} from '../../utilities/keyboard';\nimport {createEvent} from '../../utilities/events';\nimport NavItem from './NavItem';\n\n/**\n * Represent a navigation menu. May be the top nav or a subnav.\n *\n * @prop {HTMLElement|NavItem} elem       - The element that is the nav. May\n *                                          be a main nav (<nav>) or a subnav\n *                                          (NavItem).\n * @prop {Nav}                 topNav     - The instance of Nav that models\n *                                          the top nav. If this is the top\n *                                          nav, topNav === this.\n * @prop {HTMLButtonElement}   toggle     - The <button> in the DOM that\n *                                          toggles the menu on mobile. NULL\n *                                          if this is a subnav.\n * @prop {String}              toggleText - The initial text of the mobile\n *                                          toggle (so we can reset it when\n *                                          the mobile nav is closed).\n * @prop {Array}               items      - Instances of NavItem that model\n *                                          each element in the nav\n */\nexport default class Nav {\n\n  /**\n   * Create a Nav\n   *\n   * @param {HTMLElement|NavItem} elem - The element that is the nav menu.\n   *                                     May be a main nav (<nav>) or a subnav\n   *                                     (NavItem).\n   */\n  constructor(elem) {\n    this.elem = elem;\n    this.topNav = this.getTopNav();\n    // If this is a subnav, we need the correpsonding HTMLElement for\n    // .querySelector()\n    if (elem instanceof NavItem) {\n      elem = elem.item;\n    }\n    this.toggle = elem.querySelector(elem.tagName + ' > button');\n    this.toggleText = this.toggle ? this.toggle.innerText : '';\n    this.items = [];\n    // Add custom events to alert others when the mobile nav\n    // opens or closes.\n    // this.openEvent is dispatched in this.openMobileNav().\n    this.openEvent = createEvent('openNav');\n    // this.closeEvent is dispatched in this.closeMobileNav().\n    this.closeEvent = createEvent('closeNav');\n\n    // Initialize items\n    let items = elem.querySelectorAll(elem.tagName + ' > ul > li');\n    items.forEach(\n      item => {\n        this.items.push(new NavItem(item, this));\n      }\n    );\n\n    elem.addEventListener('keydown', this);\n\n    if (this.toggle) {\n      this.toggle.addEventListener('click', this);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Helper Methods.\n  // -------------------------------------------------------------------------\n\n  /**\n   * Get the instance of Nav that represents the top level nav of this\n   * instance.\n   *\n   * @return {Nav}\n   *  Returns the navigation instance.\n   */\n  getTopNav() {\n    let nav = this;\n    while (nav.elem instanceof NavItem) {\n      // If nav is the main nav, nav.elem will be an HTMLElement\n      // (the <nav> element).\n      // If nav.elem is a NavItem, then this is a subNav, so get the Nav that\n      // contains the NavItem.\n      nav = nav.elem.nav;\n    }\n    return nav;\n  }\n\n  /**\n   * Get the instance of Nav that represents the parent of this instance.\n   * If this is the top nav, return this so you can safely call methods on it.\n   *\n   * @return {Nav}\n   *   Returns the navigation instance.\n   */\n  getParentNav() {\n    return this.isSubNav() ? this.elem.nav : this;\n  }\n\n\n  /**\n   * Is this expanded?\n   * If this is a subnav, ask the subnav (NavItem) if it's expanded.\n   * Otherwise (this is the top nav), check aria-expanded.\n   *\n   * @return {Boolean}\n   *   Returns wether or not the item is expanded.\n   */\n  isExpanded() {\n    if (this.elem instanceof NavItem) {\n      return this.elem.isExpanded();\n    }\n\n    return this.elem.getAttribute('aria-expanded') === 'true';\n  }\n\n  /**\n   * Set whether or not this is expanded.\n   * If this is a subnav, let the subnav (NavItem) handled it.\n   * Otherwise (this is the top nav), set aria-expanded.\n   *\n   * @param {String} value - What to set the aria-expanded attribute of\n   *                         this's link to.\n   */\n  setExpanded(value) {\n    if (this.elem instanceof NavItem) {\n      this.elem.setExpanded(value);\n    }\n    else {\n      this.elem.setAttribute('aria-expanded', value);\n      if (this.toggle) {\n        this.toggle.setAttribute('aria-expanded', value);\n      }\n    }\n  }\n\n  /**\n   * Is this rendering the desktop style for the nav?\n   *\n   * @return {Boolean}\n   *  Returns wether or not it is desktop navigation.\n   */\n  isDesktopNav() {\n    return getComputedStyle(this.topNav.toggle).display === 'none';\n  }\n\n  /**\n   * Is this the top nav?\n   *\n   * @return {Boolean}\n   *  Returns wether or not it is the top nav item.\n   */\n  isTopNav() {\n    return this.topNav === this;\n  }\n\n  /**\n   * Is this a subnav?\n   *\n   * @return {Boolean}\n   *  Returns wether or not this is a subnav item.\n   */\n  isSubNav() {\n    return this.topNav !== this;\n  }\n\n  /**\n   * Get the first item in this nav.\n   *\n   * @return {NavItem}\n   *  Returns wether or not this is the first item.\n   */\n  getFirstItem() {\n    return this.items.length ? this.items[0] : null;\n  }\n\n  /**\n   * Get the last item in this nav.\n   *\n   * @return {NavItem}\n   *  Returns wether or not this is the last item.\n   */\n  getLastItem() {\n    return this.items.length ? this.items[this.items.length - 1] : null;\n  }\n\n  /**\n   * Get the link associated with the first item in this nav.\n   *\n   * @return {HTMLAnchorElement}\n   *  Returns the very first link.\n   */\n  getFirstLink() {\n    return this.items.length ? this.getFirstItem().link : null;\n  }\n\n  /**\n   * Get the link associated with the last item in this nav.\n   *\n   * @return {HTMLAnchorElement}\n   *  Returns the very last link.\n   */\n  getLastLink() {\n    return this.items.length ? this.getLastItem().link : null;\n  }\n\n  // -------------------------------------------------------------------------\n  // Functional methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Set the focus on the specified link in this nav.\n   *\n   * @param {String|Number} link - 'first' | 'last' | 'next'\n   *                                | 'prev' | numerical index\n   * @param {NavItem} currentItem - If link is 'next' or 'prev', currentItem\n   *                                is the NavItem that next / prev is\n   *                                relative to.\n   */\n  focusOn(link, currentItem = null) {\n    let currentIndex = null;\n    let lastIndex = null;\n    if (currentItem) {\n      currentIndex = this.items.indexOf(currentItem);\n      lastIndex = this.items.length - 1;\n    }\n    switch (link) {\n      case 'first':\n        this.getFirstLink().focus();\n        break;\n\n      case 'last':\n        this.getLastLink().focus();\n        break;\n\n      case 'next':\n        if (currentIndex === lastIndex) {\n          this.getFirstLink().focus();\n        }\n        else {\n          this.items[currentIndex + 1].link.focus();\n        }\n        break;\n\n      case 'prev':\n        if (currentIndex === 0) {\n          this.getLastLink().focus();\n        }\n        else {\n          this.items[currentIndex - 1].link.focus();\n        }\n        break;\n\n      default:\n        if (Number.isInteger(link) && link >= 0 && link < this.items.length) {\n          this.items[link].link.focus();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Close any mobile navs that might be open, then mark this mobile nav open.\n   * Optionally force focus on the first element in the nav (for keyboard nav)\n   *\n   * @param {Boolean} focusOnFirst - Whether or not to also focus on the\n   *                                 first element in the subnav.\n   */\n  openMobileNav(focusOnFirst = true) {\n    closeAllMobileNavs();\n\n    this.setExpanded('true');\n    this.toggle.innerText = 'Close';\n    if (focusOnFirst) {\n      // Focus on the first top level link.\n      this.focusOn('first');\n    }\n    // Alert others the mobile nav has opened.\n    this.elem.dispatchEvent(this.openEvent);\n  }\n\n  /**\n   * Mark this mobile closed, and restore the button text to what it was\n   * initially.\n   */\n  closeMobileNav() {\n    if (this.isExpanded()) {\n      this.setExpanded('false');\n      this.toggle.innerText = this.toggleText;\n      // Alert others the mobile nav has closed.\n      this.elem.dispatchEvent(this.closeEvent);\n    }\n  }\n\n  // -------------------------------------------------------------------------\n  // Event handlers\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handler for all events attached to an instance of this class. This method\n   * must exist when events are bound to an instance of a class\n   * (vs a function). This method is called for all events bound to an\n   * instance. It inspects the instance (this) for an appropriate handler\n   * based on the event type. If found, it dispatches the event to the\n   * appropriate handler.\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   *\n   * @return {*}\n   *  Whatever the dispatched handler returns (in our case nothing)\n   */\n  handleEvent(event) {\n    event = event || window.event;\n    // If this class has an onEvent method, e.g. onClick, onKeydown,\n    // invoke it.\n    const handler = 'on'\n      + event.type.charAt(0).toUpperCase()\n      + event.type.slice(1);\n\n    if (typeof this[handler] === 'function') {\n      // The element that was clicked.\n      const target = event.target || event.srcElement;\n      return this[handler](event, target);\n    }\n  }\n\n  /**\n   * Handler for click events. click is only bound to the mobile toggle.\n   * Dispatched from this.handleEvent().\n   *\n   * @param {KeyboardEvent} event   - The keyboard event object.\n   * @param {HTMLElement}   target  - The HTML Element target object.\n   */\n  onClick(event, target) {\n    if (target === this.toggle) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.isExpanded()) {\n        this.closeMobileNav();\n      }\n      else {\n        this.openMobileNav(false);\n      }\n    }\n  }\n\n  /**\n   * Handler for keydown events. keydown is bound to all Nav's.\n   * Dispatched from this.handleEvent().\n   *\n   * @param {KeyboardEvent} event   - The keyboard event object.\n   * @param {HTMLElement}   target  - The HTML Element target object.\n   */\n  onKeydown(event, target) {\n    const theKey = event.key || event.keyCode;\n\n    if (isEsc(theKey)) {\n      if (this.isTopNav()) {\n        if (!this.isDesktopNav()) {\n          event.preventDefault();\n          event.stopPropagation();\n          this.closeMobileNav();\n          this.toggle.focus();\n        }\n      }\n      else {\n        if (this.isExpanded()) {\n          event.preventDefault();\n          event.stopPropagation();\n          this.elem.closeSubNav(true);\n        }\n      }\n    }\n    else if (isEnter(theKey) || isSpace(theKey)) {\n      if (target === this.toggle) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (!this.isExpanded()) {\n          this.openMobileNav();\n        }\n      }\n    }\n  }\n\n}\n","import '../../core/core';\nimport {theNavs, closeAllSubNavs, closeAllMobileNavs} from './globals';\nimport Nav from './Nav';\n\ndocument.addEventListener('DOMContentLoaded', event => {\n\n  // The css class that this following behaviour is applied to.\n  const navClass = 'su-main-nav';\n  // All main navs.\n  const navs = document.querySelectorAll('.' + navClass);\n\n  // Process each nav.\n  let firstZindex;\n  navs.forEach((nav, index) => {\n    // Remove the class that formats the nav for browsers with javascript disabled.\n    nav.classList.remove('no-js');\n\n    // Create an instance of Nav, which in turn creates appropriate instances of NavItem.\n    const theNav = new Nav(nav);\n\n    // Remember the nav for closeAllMobileNavs().\n    theNavs.push(theNav);\n\n    // Manage zindexes in case there are multiple navs near enough for subnavs to overlap.\n    // Rare, but it happens in the styleguide.\n    if (index === 0) {\n      firstZindex = getComputedStyle(nav, null).zIndex;\n    }\n    else {\n      nav.style.zIndex = firstZindex - 300 * index;\n    }\n  }); // navs.forEach\n\n  // Clicking anywhere outside a nav closes all navs.\n  document.addEventListener('click', event => {\n    // The element that was clicked.\n    const target = event.target || event.srcElement;\n    // If target is not under a main nav close all navs.\n    if (!target.matches('.' + navClass + ' ' + target.tagName)) {\n      closeAllSubNavs();\n      closeAllMobileNavs();\n    }\n  }, false);\n\n}); // on DOMContentLoaded.\n","// The css class that this following behaviour is applied to.\nconst secondaryNavClass = 'su-secondary-nav';\n\n// All Secondary navs.\nexport var secondaryNavs = document.querySelectorAll('.' + secondaryNavClass);\n","/**\n * ActivePath\n *\n * This class contains features and functionality for handling the finding and\n * setting of the active trail of a menu.\n */\nexport default class ActivePath {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element The DOM object of the navigation menu.\n   * @param {Mixed} item          The Navigation Class.\n   * @param {Object} options      An optional object of meta information.\n   */\n  constructor(element, item, options = {}) {\n    this.elem = element;\n    this.item = item;\n    // CSS Class properties.\n    this.itemActiveClass = options.itemActiveClass || 'active';\n    this.itemActiveTrailClass = options.itemActiveTrailClass || 'active-trail';\n    this.itemExpandedClass = options.itemExpandedClass || 'expanded';\n  }\n\n  /**\n   * Dynamically add an active path to the menu tree.\n   *\n   * Find all links with the current window's url and add the\n   * options.itemActiveClass class to the LI element container all the way up\n   * the menu tree back to the root.\n   */\n  setActivePath() {\n    let path = window.location.pathname;\n    let anchor = window.location.hash || '';\n    let query = window.location.search || '';\n    let currentItem = false;\n\n    // Queries to run to find matching active paths in order of unqiueness.\n    let finders = [\n      this.elem.querySelector(\"a[href*='\" + anchor + \"']\"),\n      this.elem.querySelector(\"a[href*='\" + query + \"']\"),\n      this.elem.querySelector(\"a[href='\" + path + query + anchor + \"']\"),\n      this.elem.querySelector(\"a[href*='\" + path + query + \"']\")\n    ];\n\n    // Go through the queries and see if we have any results.\n    finders.forEach(function (val) {\n      if (!currentItem && val) {\n        currentItem = val;\n      }\n    });\n\n    // Can't find anything. End.\n    if (!currentItem) {\n      return;\n    }\n\n    // While we have parents go up and add the active class.\n    while (currentItem) {\n\n      // If we are on a LI element we need to add the active class.\n      if (currentItem.tagName === 'LI') {\n        currentItem.classList.add(this.itemActiveClass);\n        break;\n      }\n\n      // Always increment.\n      currentItem = currentItem.parentNode;\n    }\n  }\n\n  /**\n   * Expand all menus in the active path.\n   *\n   * After this.setActivePath() has been run or the itemActiveClass has been set\n   * on all the appropriate menu items go through the nav and expand the\n   * subNavItems that contain activeClass items.\n   */\n  expandActivePath() {\n    let actives = this.elem.querySelectorAll('.' + this.itemActiveClass);\n    if (actives.length) {\n      actives.forEach(\n        element => {\n\n          // While we have parents go up and add the active class.\n          while (element) {\n            // End when we get to the parent nav item stop.\n            if (element === this.elem) {\n              // Stop at the top most level.\n              break;\n            }\n\n            // If we are on a LI element we need to add the active class.\n            if (element.tagName === 'LI') {\n              element.classList.add(this.itemExpandedClass);\n              element.classList.add(this.itemActiveTrailClass);\n              // \"Hook\" of sorts.\n              if (typeof this.item.expandActivePathItem == 'function') {\n                this.item.expandActivePathItem(element);\n              }\n            }\n\n            // Always increment.\n            element = element.parentNode;\n          }\n        }\n      );\n    }\n  }\n}\n","import {normalizeKey} from '../../utilities/keyboard';\n\n/**\n * EventHandlerDispatch Class\n *\n * This class provides dynamic handling of click and keyboard events and can be\n * attached to any class/HTMLElement.\n */\nexport default class EventHandlerDispatch {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element   The HTMLElement to bind listeners to.\n   * @param {type}      handler   The Javascript Class instance with the\n   *                                eventRegistry property.\n   */\n  constructor(element, handler) {\n    this.elem = element;\n    this.handler = handler;\n    this.createEventListeners();\n  }\n\n  /**\n   * Create new event listeners.\n   */\n  createEventListeners() {\n    // What to do when a key is down?\n    this.elem.addEventListener('keydown', this);\n\n    // Listen to the click so we can act on it.\n    this.elem.addEventListener('click', this);\n\n    // Listen to custom events so we can act on it.\n    this.elem.addEventListener('preOpenSubnav', this);\n\n    // Listen to custom events so we can act on it.\n    this.elem.addEventListener('postOpenSubnav', this);\n  }\n\n  /**\n   * Handler for all events attached to an instance of this class.\n   *\n   * This method must exist when events are bound to an instance of a class\n   * (vs a function). This method is called for all events bound to an\n   * instance. It inspects the instance (this) for an appropriate handler\n   * based on the event type. If found, it dispatches the event to the\n   * appropriate handler.\n   *\n   * @param {Event} event - The triggering event.\n   */\n  handleEvent(event) {\n    event = event || window.event;\n\n    // Create an event signature.\n    const eventMethod = 'on'\n      + event.type.charAt(0).toUpperCase()\n      + event.type.slice(1);\n\n    // What was clicked.\n    const target = event.target || event.srcElement;\n\n    if (eventMethod === 'onKeydown') {\n      this.onKeydown(event, target);\n    }\n    else if (eventMethod === 'onClick') {\n      this.onClick(event, target);\n    }\n    else {\n      this.callEvent(eventMethod, event, target);\n    }\n  }\n\n  /**\n   * Handler for keydown events.\n   *\n   * @param {KeyboardEvent} event - The keyboard event object.\n   * @param {HTMLElement} target  - The HTML element target.\n   */\n  onKeydown(event, target) {\n    let theKey = event.key || event.keyCode;\n    let normalized = normalizeKey(theKey);\n\n    // We don't know or need to handle the key that was pressed.\n    if (!normalized) {\n      return;\n    }\n\n    // Prepare a dynamic handler.\n    let eventMethod = 'onKeydown'\n      + normalized.charAt(0).toUpperCase()\n      + normalized.slice(1);\n\n    // Do eet.\n    this.callEvent(eventMethod, event, target);\n  }\n\n  /**\n   * Handler for click events.\n   *\n   * @param  {Event} event  A Javascript event.\n   * @param  {HTMLElement} target The target of the event.\n   */\n  onClick(event, target) {\n    this.callEvent('onClick', event, target);\n  }\n\n  /**\n   * The event handler\n   *\n   * Initializes and executes an object to handle the Javascript Event as\n   * defined by the handlers eventRegistry.\n   *\n   * @param  {String} eventMethod A string key for the eventRegistry;\n   * @param  {Event} event        The Javascript event.\n   * @param  {HTMLElement} target The DOM object that the event is triggered on.\n   */\n  callEvent(eventMethod, event, target) {\n    if (typeof this.handler.eventRegistry[eventMethod] === 'function') {\n      var eventObj = new this.handler.eventRegistry[eventMethod](this.handler, event, target);\n      eventObj.init();\n    }\n  }\n\n}\n","/**\n * ElementFetcher Class\n *\n * Provides a relative named DOM navigator for quickly getting elements relative\n * to the provided context.\n */\nexport default class ElementFetcher {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element   The DOM object to use.\n   * @param {String} what           A named string.\n   */\n  constructor(element, what) {\n    this.item = element;\n    this.what = what;\n  }\n\n  /**\n   * Attempt to retrieve an item.\n   *\n   * @return {Boolean|HTMLElement} An element or false if `what` is not found.\n   */\n  fetch() {\n    try {\n      switch (this.what) {\n        case 'first':\n          return this.item.parentNode.firstElementChild.firstChild;\n        case 'last':\n          return this.item.parentNode.lastElementChild.firstChild;\n        case 'firstElement':\n          return this.item.parentNode.firstElementChild;\n        case 'lastElement':\n          return this.item.parentNode.lastElementChild;\n        case 'next':\n          return this.item.nextElementSibling.querySelector('a');\n        case 'prev':\n          return this.item.previousElementSibling.querySelector('a');\n        case 'nextElement':\n          return this.item.nextElementSibling;\n        case 'prevElement':\n          return this.item.previousElementSibling;\n        case 'parentItem':\n          var node = this.item.parentNode.parentNode;\n          if (node.tagName === 'NAV') { return false; }\n          return node.querySelector('a');\n        case 'parentButton':\n          return this.item.parentNode.parentNode.querySelector('button');\n        case 'parentNav':\n          return this.item.parentNode.parentNode;\n        case 'parentNavLast':\n          return this.item.parentNode.parentNode.parentNode.lastElementChild.querySelector('a');\n        case 'parentNavFirst':\n          return this.item.parentNode.parentNode.parentNode.firstElementChild.querySelector('a');\n        case 'parentNavNext':\n          return this.item.parentNode.parentNode.nextElementSibling;\n        case 'parentNavNextItem':\n          return this.item.parentNode.parentNode.nextElementSibling.querySelector('a');\n        case 'parentNavPrev':\n          return this.item.parentNode.parentNode.previousElementSibling;\n        case 'parentNavPrevItem':\n          return this.item.parentNode.parentNode.previousElementSibling.querySelector('a');\n        case 'firstSubnavLink':\n          return this.item.querySelector(':scope > ul li a');\n        case 'firstSubnavItem':\n          return this.item.querySelector(':scope > ul li');\n        case 'subnav':\n          return this.item.querySelector(':scope > ul');\n        default:\n          return false;\n      }\n    }\n    catch (err) {\n      return false;\n    }\n  }\n}\n","import ElementFetcher from '../../../nav/ElementFetcher';\n\n/**\n * EventAbstract\n *\n * An abstract class for creating an interface for working with the\n * EventHandlerDispatch class. This is the signature for all instances\n * that are evoked through the eventRegistry.\n */\nexport default class EventAbstract {\n\n  /**\n   * Initialize.\n   *\n   * @param {Object|Mixed} item The javascript object instance that this is bound to.\n   * @param {KeyboardEvent|MouseEvent} event - The event object.\n   * @param {HTMLElement} target  - The HTML element target.\n   */\n  constructor(item, event, target) {\n    this.item = item;\n    this.elem = item.elem;\n    this.masterNav = item.masterNav;\n    this.parentNav = item.parentNav;\n    this.target = target;\n    this.event = event;\n  }\n\n  /**\n   * A validation shorcut that should pass before running exec().\n   *\n   * @return {Boolean} Wether or not the event target is what this instance is bound to.\n   */\n  isOnTarget() {\n    // Check to see if the event target is what this instance is bound to.\n    if (this.target === this.elem) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * A validation method that should pass before running exec().\n   *\n   * @return {Boolean} Wether or not validation passes.\n   */\n  validate() {\n    // Only act on me.\n    if (!this.isOnTarget()) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Interface method.\n   *\n   * When evoking this abstract instance you should use this method as your\n   * iterface for calling the action.\n   */\n  init() {\n    if (this.validate()) {\n      this.exec();\n    }\n  }\n\n  /**\n   * Shortcut function to find a DOM element.\n   *\n   * This is a helper function that uses a ElementFetcher instance to navigate\n   * and traverse the DOM relative to the current context.\n   *\n   * @param  {String} what A keyword for what we are trying to find.\n   * @param  {HTMLElement} context The relative starting location for the finder.\n   * @return {Boolean|HTMLElement} False if not found or an HTMLElement.\n   */\n  getElement(what, context = this.elem.parentNode) {\n    var fetcher = new ElementFetcher(context, what);\n    return fetcher.fetch();\n  }\n\n}\n","import EventAbstract from './EventAbstract';\n\n/**\n * OnEsc\n *\n * Event action handler class.\n */\nexport default class OnEsc extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n    let node = false;\n\n    if (this.item.getDepth() > 1) {\n      this.event.stopPropagation();\n      this.parentNav.closeSubNav();\n      node = this.getElement('parentItem');\n    }\n    else {\n      this.masterNav.closeAllSubNavs();\n      node = this.getElement('first', this.item.parentNode);\n    }\n\n    if (node) {\n      node.focus();\n    }\n  }\n\n}\n","import EventAbstract from './EventAbstract';\n\n/**\n * OnSpace\n *\n * Event action handler class.\n */\nexport default class OnSpace extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.stopPropagation();\n    this.event.preventDefault();\n    window.location = this.target.getAttribute('href');\n  }\n\n}\n","import ActivePath from '../../nav/ActivePath';\nimport EventHandlerDispatch from '../../nav/EventHandlerDispatch';\nimport OnEsc from './events/OnEsc';\nimport OnSpace from './events/OnSpace';\n\n/**\n * SecondaryNav Class\n *\n * The most abstract version of a SecondaryNav. All Nav types should extend\n * this class in order to have a psuedo interface and default methods.\n */\nexport default class SecondaryNavAbstract {\n\n  /**\n   * Nav Abstract Constructor class.\n   *\n   * @param {HTMLElement} element    The html element to use as the parent for the nav list.\n   * @param {Object} options      An object with key value pairs of configuration options.\n   */\n  constructor(element, options = {}) {\n    // What HTML element this is bound to.\n    this.elem = element;\n\n    // Set some default options.\n    var defaultOptions = {\n      itemClass: 'su-secondary-nav__item',\n      itemExpandedClass: 'su-secondary-nav__item--expanded',\n      itemActiveClass: 'su-secondary-nav__item--current',\n      itemActiveTrailClass: 'su-secondary-nav__item--active-trail',\n      itemParentClass: 'su-secondary-nav__item--parent',\n      eventRegistry: {}\n    };\n\n    // Merge with passed in options.\n    this.options = Object.assign(defaultOptions, options);\n\n    // Remove the no-js class.\n    this.elem.classList.remove('no-js');\n\n    // Assign the event dispatcher and event registry.\n    this.eventRegistry = this.createEventRegistry(options);\n    this.dispatch = new EventHandlerDispatch(element, this);\n\n    // Handle the active state.\n    this.activePath = new ActivePath(element, this, this.options);\n    this.activePath.setActivePath();\n\n    // Helper Item Variables.\n    this.navItems = [];\n    this.subNavItems = [];\n    this.parentItemSelector = ':scope > ul > .' + this.options.itemParentClass;\n    this.navItemSelector = ':scope > ul > .' + this.options.itemClass + ':not(.' + this.options.itemParentClass + ')';\n  }\n\n  /**\n   * Add the additional state handling after the abstract option has run.\n   *\n   * @param  {HTMLElement} item The HTMLElement being acted upon.\n   */\n  expandActivePathItem(item) {\n    // For any additional items outside of the core functions.\n  }\n\n  /**\n   * Creates an event registry for handling types of events.\n   *\n   * This registry is used by the EventHandlerDispatch class to bind and\n   * execute the events in the created property key.\n   *\n   * @param  {Object} options Options to merge in with the defaults.\n   *\n   * @return {Object} A key/value registry of events and handlers.\n   */\n  createEventRegistry(options) {\n\n    var registryDefaults = {\n      onKeydownEscape: OnEsc,\n      onKeydownSpace: OnSpace\n    };\n\n    return Object.assign(registryDefaults, options.eventRegistry);\n  }\n\n  /**\n   * Kickoff method for generating single and multi-tier nav instances.\n   */\n  createSubNavItems() {\n\n    // Find all the single and multi-tier items.\n    var parentItems = this.elem.querySelectorAll(this.parentItemSelector);\n    var leafItems = this.elem.querySelectorAll(this.navItemSelector);\n\n    // Sub Nav Items.\n    if (parentItems.length >= 1) {\n      this.createParentItems(parentItems);\n    }\n\n    // Regular Ol Items.\n    if (leafItems.length >= 1) {\n      this.createNavItems(leafItems);\n    }\n  }\n\n  /**\n   * Recursive loop for creating nested navigation instances.\n   *\n   * @param  {NodeList} items A set of sibling parent menu items.\n   * @param  {Number} depth The current depth of recursion.\n   * @param  {Object|Mixed} parentMenu The instance of the parent menu.\n   */\n  createParentItems(items, depth = 1, parentMenu = null) {\n    items.forEach(\n      item => {\n        var itemLink = item.querySelector('a');\n        var parentItems = item.querySelectorAll(this.parentItemSelector);\n        var leafItems = item.querySelectorAll(this.navItemSelector);\n        var nextDepth = depth + 1;\n        var parentNav = null;\n\n        // If we have a link add to it.\n        if (itemLink) {\n          parentNav = this.newParentItem(itemLink, depth, parentMenu);\n        }\n\n        // Nested Sub Nav Items.\n        if (parentItems.length >= 1) {\n          this.createParentItems(parentItems, nextDepth, parentNav);\n        }\n\n        // Nested Nav Items.\n        if (leafItems.length >= 1) {\n          this.createNavItems(leafItems, nextDepth, parentNav);\n        }\n      }\n    );\n  }\n\n  /**\n   * Recursive loop for creating single level navigation instances.\n   *\n   * @param  {NodeList} items A set of sibling parent menu items.\n   * @param  {Number} depth The current depth of recursion.\n   * @param  {Object|Mixed} parentMenu The instance of the parent menu.\n   */\n  createNavItems(items, depth = 1, parentMenu = null) {\n    items.forEach(\n      item => {\n        var itemLink = item.querySelector('a');\n        if (itemLink) {\n          this.newNavItem(itemLink, depth, parentMenu);\n        }\n      }\n    );\n  }\n\n  /**\n   * Close all subNavItems in this Nav.\n   */\n  closeAllSubNavs() {\n    this.subNavItems.forEach(\n      (item, event) => {\n        item.closeSubNav();\n      }\n    );\n  }\n\n  /**\n   * Close only this subnav.\n   */\n  closeSubNav() {\n    this.closeAllSubNavs();\n  }\n}\n","import EventAbstract from './EventAbstract';\n\n/**\n * OnHome\n *\n * Event action handler class.\n */\nexport default class OnHome extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n    var node = this.getElement('first');\n    if (node) {\n      node.focus();\n    }\n  }\n\n}\n","import EventAbstract from './EventAbstract';\nimport OnHome from './OnHome';\n\n/**\n * OnArrowDown\n *\n * Event action handler class.\n */\nexport default class OnArrowDown extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n\n    // Go to the next item.\n    let node = this.getElement('next');\n    if (node) {\n      node.focus();\n      return;\n    }\n\n    // If a node is not found go to home.\n    var eventHome = new OnHome(this.item, this.event, this.target);\n    eventHome.init();\n  }\n\n}\n","import EventAbstract from './EventAbstract';\n\n/**\n * OnEnd\n *\n * Event action handler class.\n */\nexport default class OnEnd extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n    var node = this.getElement('last');\n    if (node) {\n      node.focus();\n    }\n  }\n\n}\n","import EventAbstract from './EventAbstract';\nimport OnEnd from './OnEnd';\n\n/**\n * OnArrowUp\n *\n * Event action handler class.\n */\nexport default class OnArrowUp extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n\n    // Go to the previous item.\n    let node = this.getElement('prev');\n    if (node) {\n      node.focus();\n      return;\n    }\n\n    // Default to the end..\n    var eventEnd = new OnEnd(this.item, this.event, this.target);\n    eventEnd.init();\n\n  }\n}\n","import EventAbstract from './EventAbstract';\nimport OnArrowUp from './OnArrowUp';\n\n/**\n * OnArrowLeft\n *\n * Event action handler class.\n */\nexport default class OnArrowLeft extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n\n    // If this is a nested item. Go back up a level.\n    if (this.item.getDepth() > 1) {\n      this.nestedLeft();\n    }\n    // Otherwise just to to the previous sibling.\n    else if (this.item.getDepth() === 1) {\n      this.firstLevelLeft();\n    }\n  }\n\n  /**\n   * Action to take on a first level left key press.\n   */\n  firstLevelLeft() {\n    var upevent = new OnArrowUp(this.item, this.event, this.target);\n    upevent.init();\n  }\n\n  /**\n   * Action to take on a nested level left key press\n   */\n  nestedLeft() {\n    let node = this.getElement('parentItem') || this.getElement('parentNavLast');\n    this.parentNav.closeSubNav();\n\n    if (node) {\n      node.focus();\n    }\n  }\n\n}\n","import EventAbstract from './EventAbstract';\nimport OnArrowDown from './OnArrowDown';\n\n/**\n * OnArrowRight\n *\n * Event action handler class.\n */\nexport default class OnArrowRight extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    // If we are in the second level or more we check about traversing\n    // the parent.\n    if (this.item.getDepth() > 1) {\n      let node = this.getElement('parentNavNext');\n      this.parentNav.closeSubNav();\n\n      if (node) {\n        node.querySelector('a').focus();\n      }\n      // Go back to start.\n      else {\n        this.getElement('parentNavFirst').focus();\n      }\n    }\n    else {\n      var eventDown = new OnArrowDown(this.item, this.event, this.target);\n      eventDown.init();\n    }\n  }\n\n}\n","import EventAbstract from './EventAbstract';\n\n/**\n * OnEnter\n *\n * Event action handler class.\n */\nexport default class OnEnter extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.stopPropagation();\n    this.event.preventDefault();\n    window.location = this.target.getAttribute('href');\n  }\n\n}\n","import EventAbstract from './EventAbstract';\n\n/**\n * OnTab\n *\n * Event action handler class.\n */\nexport default class OnTab extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    const shifted = event.shiftKey;\n    let node = null;\n    let firstItem = this.masterNav.elem.querySelector('a');\n    let lastItem = this.masterNav.elem.firstElementChild.lastElementChild.querySelector('li:last-child');\n\n    // If shift key is held.\n    if (shifted) {\n      node = this.getElement('prev');\n      if (this.target === firstItem) {\n        this.masterNav.closeAllSubNavs();\n        return;\n      }\n    }\n    // No shift key, just regular ol tab.\n    else {\n      node = this.getElement('next');\n      if (this.target.parentNode === lastItem) {\n        this.masterNav.closeAllSubNavs();\n        return;\n      }\n    }\n\n    // No nodes were found. Close up behind us.\n    if (!node) {\n      if (this.item.getDepth() > 1) {\n        this.parentNav.closeSubNav();\n      }\n    }\n  }\n}\n","import EventHandlerDispatch from '../../nav/EventHandlerDispatch';\n\n// Keyboard control events.\nimport OnArrowDown from './events/OnArrowDown';\nimport OnArrowLeft from './events/OnArrowLeft';\nimport OnArrowRight from './events/OnArrowRight';\nimport OnArrowUp from './events/OnArrowUp';\nimport OnEnd from './events/OnEnd';\nimport OnEsc from './events/OnEsc';\nimport OnHome from './events/OnHome';\nimport OnEnter from './events/OnEnter';\nimport OnSpace from './events/OnSpace';\nimport OnTab from './events/OnTab';\n\n/**\n * SecondaryNav Class\n */\nexport default class SecondaryNavItem {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element      The HTMLElement to bind to.\n   * @param {Object|Mixed} masterNav   The top most navigation instance.\n   * @param {Object|Mixed} parentNav   The parent nav instance if available.\n   * @param {Object} options           An object of metadata.\n   */\n  constructor(element, masterNav, parentNav = null, options = {}) {\n    this.elem = element;\n    this.item = element.parentNode;\n    this.masterNav = masterNav;\n    this.parentNav = parentNav;\n    this.depth = options.depth || 1;\n\n    // Assign the event dispatcher and event registry.\n    this.eventRegistry = this.createEventRegistry(options);\n    this.dispatch = new EventHandlerDispatch(element, this);\n  }\n\n  /**\n   * Creates an event registry for handling types of events.\n   *\n   * This registry is used by the EventHandlerDispatch class to bind and\n   * execute the events in the created property key.\n   *\n   * @param  {Object} options Options to merge in with the defaults.\n   *\n   * @return {Object} A key/value registry of events and handlers.\n   */\n  createEventRegistry(options) {\n\n    var registryDefaults = {\n      onKeydownHome: OnHome,\n      onKeydownEnd: OnEnd,\n      onKeydownTab: OnTab,\n      onKeydownSpace: OnSpace,\n      onKeydownEnter: OnEnter,\n      onKeydownEscape: OnEsc,\n      onKeydownArrowUp: OnArrowUp,\n      onKeydownArrowRight: OnArrowRight,\n      onKeydownArrowDown: OnArrowDown,\n      onKeydownArrowLeft: OnArrowLeft\n    };\n\n    return Object.assign(registryDefaults, options.eventRegistry);\n  }\n\n  /**\n   * Get the level of nesting for this nav.\n   *\n   * @return {Integer} The integer of depth starting at 1.\n   */\n  getDepth() {\n    return this.depth;\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * OnClick\n *\n * Event action handler class.\n */\nexport default class OnClick extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.stopPropagation();\n    this.event.preventDefault();\n\n    if (this.item.isExpanded()) {\n      this.item.closeSubNav();\n      // We blur then focus so that the browser announces the collapse to\n      // those using screen readers and other assistive devices.\n      this.elem.blur();\n      this.elem.focus();\n    }\n    else {\n      this.item.openSubNav();\n    }\n  }\n\n}\n","import EventAbstract from '../../common/events/EventAbstract';\nimport OnClick from './OnClick';\n\n/**\n * OnSpace\n *\n * Event action handler class.\n */\nexport default class OnSpace extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n\n    // Do the rest of the stuff click does.\n    var eventClick = new OnClick(this.item, this.event, this.target);\n    eventClick.init();\n\n    // Focus on the first element for keyboard but not clicks.\n    if (this.item.isExpanded()) {\n      this.getElement('firstSubnavLink').focus();\n    }\n  }\n\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * OnArrowRight\n *\n * Event action handler class.\n */\nexport default class OnArrowRight extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    // Go down a level and open the SubNav.\n    this.event.preventDefault();\n    this.item.openSubNav();\n    this.getElement('firstSubnavLink').focus();\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\nimport NavItemOnArrowLeft from '../../common/events/OnArrowLeft';\n\n/**\n * OnArrowLeft\n *\n * Event action handler class.\n */\nexport default class OnArrowLeft extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    // Go up a level and close the nav.\n    this.event.preventDefault();\n\n    // Previous nav parents link item to focus on.\n    var node = this.getElement('parentItem');\n    this.parentNav.closeSubNav();\n\n    // If we found a previous item focus on it.\n    if (node) {\n      node.focus();\n    }\n    // Overwise do what the navigate left option does.\n    else {\n      var otherLeft = new NavItemOnArrowLeft(this.item, this.event, this.target);\n      otherLeft.init();\n    }\n  }\n}\n","import EventHandlerDispatch from '../../nav/EventHandlerDispatch';\n// Click handler.\nimport OnClick from './events/OnClick';\n// Keyboard events.\nimport OnHome from '../common/events/OnHome';\nimport OnEnd from '../common/events/OnEnd';\nimport OnTab from '../common/events/OnTab';\nimport OnEsc from '../common/events/OnEsc';\nimport OnSpace from './events/OnSpace';\nimport OnArrowUp from '../common/events/OnArrowUp';\nimport OnArrowRight from './events/OnArrowRight';\nimport OnArrowDown from '../common/events/OnArrowDown';\nimport OnArrowLeft from './events/OnArrowLeft';\n\n/**\n * SecondarySubNavAccordion Class\n *\n * A sub menu class for creating a menu with accordion functionality.\n */\nexport default class SecondarySubNavAccordion {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element     The container wrapper for the nav.\n   * @param {Object|Mixed} masterNav  The top most level navigation.\n   * @param {Object|Mixed} parentNav  The parent navigation instance if this\n   *                                  instance is nested.\n   * @param {Object} options          A meta object of information and options.\n   */\n  constructor(element, masterNav, parentNav = null, options = {}) {\n    // Vars.\n    this.elem = element;\n    this.item = element.parentNode;\n    this.masterNav = masterNav;\n    this.parentNav = parentNav;\n    this.depth = options.depth || 1;\n\n    // Merge in defaults.\n    this.options = Object.assign({\n      itemExpandedClass: 'su-secondary-nav__item--expanded'\n    }, options);\n\n    // Assign the event dispatcher and event registry.\n    this.eventRegistry = this.createEventRegistry(options);\n    this.dispatch = new EventHandlerDispatch(element, this);\n  }\n\n  /**\n   * Creates an event registry for handling types of events.\n   *\n   * This registry is used by the EventHandlerDispatch class to bind and\n   * execute the events in the created property key.\n   *\n   * @param  {Object} options Options to merge in with the defaults.\n   *\n   * @return {Object} A key/value registry of events and handlers.\n   */\n  createEventRegistry(options) {\n\n    var registryDefaults = {\n      onClick: OnClick,\n      onKeydownSpace: OnSpace,\n      onKeydownEnter: OnSpace,\n      onKeydownHome: OnHome,\n      onKeydownEnd: OnEnd,\n      onKeydownTab: OnTab,\n      onKeydownEscape: OnEsc,\n      onKeydownArrowUp: OnArrowUp,\n      onKeydownArrowRight: OnArrowRight,\n      onKeydownArrowDown: OnArrowDown,\n      onKeydownArrowLeft: OnArrowLeft\n    };\n\n    return Object.assign(registryDefaults, options.eventRegistry);\n  }\n\n  /**\n   * Is this expanded? Can only return TRUE if this is a subnav trigger.\n   *\n   * @return {Boolean}\n   *  Wether or not the item is expanded.\n   */\n  isExpanded() {\n    return this.elem.getAttribute('aria-expanded') === 'true';\n  }\n\n  /**\n   * Handles the opening of a sub-nav.\n   *\n   * If this is a subnav trigger, open the corresponding subnav.\n   * Optionally force focus on the first element in the subnav\n   * (for keyboard nav).\n   */\n  openSubNav() {\n    this.elem.setAttribute('aria-expanded', 'true');\n    this.item.classList.add(this.options.itemExpandedClass);\n  }\n\n  /**\n   * Handles the closing of a subnav.\n   *\n   * If this is a subnav trigger or an item in a subnav, close the\n   * corresponding subnav. Optionally force focus on the trigger.\n   */\n  closeSubNav() {\n    this.elem.setAttribute('aria-expanded', 'false');\n    this.item.classList.remove(this.options.itemExpandedClass);\n  }\n\n  /**\n   * Get the level of nesting for this nav.\n   *\n   * @return {Integer} The integer of depth starting at 1.\n   */\n  getDepth() {\n    return this.depth;\n  }\n\n}\n","import SecondaryNavAbstract from '../common/SecondaryNavAbstract';\nimport SecondaryNavItem from '../common/SecondaryNavItem';\nimport SecondarySubNavAccordion from './SecondarySubNavAccordion';\n\n/**\n * A secondary menu with accordion buttons.\n */\nexport default class SecondaryNavAccordion extends SecondaryNavAbstract {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} elem  The outermost wrapper for the Navigation.\n   * @param {Object} options    An object of metadata.\n   */\n  constructor(elem, options = {}) {\n    // Let super do what super does.\n    super(elem, options);\n\n    // Ok do the creation.\n    this.createSubNavItems();\n\n    // Expand the active path.\n    this.activePath.expandActivePath();\n  }\n\n  /**\n   * Add the additional state handling after the abstract option has run.\n   *\n   * @param  {HTMLElement} item The HTMLElement being acted upon.\n   */\n  expandActivePathItem(item) {\n    item.firstElementChild.setAttribute('aria-expanded', 'true');\n  }\n\n  /**\n   * Function for creating a new nested navigation item.\n   *\n   * @param  {HTMLElement} item     The HTMLElement to attach a new subnav to.\n   * @param  {Integer} depth        The level of nesting. (starts at 1)\n   * @param  {Object|Mixed} parent  The parent subnav instance.\n   *\n   * @return {SecondarySubNavAccordion} A brand new instance.\n   */\n  newParentItem(item, depth, parent) {\n    var opts = this.options;\n    opts.depth = depth;\n\n    var nav = new SecondarySubNavAccordion(\n      item,\n      this,\n      parent,\n      opts\n    );\n    this.subNavItems.push(nav);\n    return nav;\n  }\n\n  /**\n   * Function for creating a new single tier navigation item.\n   *\n   * @param  {HTMLElement} item     The HTMLElement to attach a new subnav to.\n   * @param  {Integer} depth        The level of nesting. (starts at 1)\n   * @param  {Object|Mixed} parent  The parent subnav instance.\n   *\n   * @return {SecondaryNavItem} A brand new instance.\n   */\n  newNavItem(item, depth, parent) {\n    var opts = this.options;\n    opts.depth = depth;\n\n    var nav = new SecondaryNavItem(\n      item,\n      this,\n      parent,\n      opts\n    );\n    this.navItems.push(nav);\n    return nav;\n  }\n}\n","import '../../core/core';\nimport {secondaryNavs} from './common/globals';\nimport SecondaryNavAccordion from './accordion/SecondaryNavAccordion';\n\ndocument.addEventListener('DOMContentLoaded', event => {\n\n  // Process each secondary nav accordion.\n  secondaryNavs.forEach((nav, index) => {\n    if (nav.className.match(/su-secondary-nav--accordion/)) {\n      new SecondaryNavAccordion(nav);\n    }\n  });\n\n});\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * SubNavToggleClick\n *\n * Event action handler class.\n */\nexport default class SubNavToggleClick extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    if (this.parentNav.isExpanded()) {\n      this.parentNav.closeSubNav();\n      this.elem.blur();\n      this.elem.focus();\n    }\n    else {\n      this.parentNav.openSubNav();\n    }\n  }\n\n}\n","import EventAbstract from '../../common/events/EventAbstract';\nimport SubNavToggleClick from './SubNavToggleClick';\n\n/**\n * SubNavToggleSpace\n *\n * Event action handler class.\n */\nexport default class SubNavToggleSpace extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    // No jumping around.\n    this.event.preventDefault();\n\n    // Call the click because it is pretty much the same thing.\n    var eventClick = new SubNavToggleClick(this.item, this.event, this.target);\n    eventClick.init();\n\n    // Only focus on keyboard nav not on click.\n    if (this.parentNav.isExpanded()) {\n      var node = this.getElement('firstSubnavLink');\n      if (node) {\n        node.focus();\n      }\n    }\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * SubNavToggleArrowDown\n *\n * Event action handler class.\n */\nexport default class SubNavToggleArrowDown extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n\n    // If on the toggle item and the menu is expanded go down in to the first\n    // menu item link as the focus.\n    if (this.parentNav.isExpanded()) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.getElement('firstSubnavLink').focus();\n    }\n    // If current focus is on the toggle and the menu is not open, go to the\n    // next sibling menu item.\n    else {\n      var node =\n        this.getElement('next') ||\n        this.getElement('parentNavNext') ||\n        this.getElement('last');\n      if (node) {\n        node.focus();\n      }\n    }\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * SubNavToggleArrowLeft\n *\n * Event action handler class.\n */\nexport default class SubNavToggleArrowLeft extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    event.stopPropagation();\n    event.preventDefault();\n    this.parentNav.elem.focus();\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * SubNavToggleArrowUp\n *\n * Event action handler class.\n */\nexport default class SubNavToggleArrowUp extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.event.preventDefault();\n\n    // If the current focus is on the toggle and the menu is expanded, close\n    // this nav menu and go to the parent list item.\n    if (this.parentNav.isExpanded()) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.parentNav.closeSubNav();\n      this.getElement('parentItem').focus();\n    }\n    // If the focus is on the toggle and the menu is not expanded, go to the\n    // previous sibling item by calling the super method.\n    else {\n      var node =\n        this.getElement('prev') ||\n        this.getElement('parentNavPrev') ||\n        this.getElement('first');\n      if (node) {\n        node.focus();\n      }\n    }\n  }\n}\n","import EventHandlerDispatch from '../../nav/EventHandlerDispatch';\n// Events\nimport SubNavToggleClick from './events/SubNavToggleClick';\nimport SubNavToggleSpace from './events/SubNavToggleSpace';\nimport SubNavToggleArrowDown from './events/SubNavToggleArrowDown';\nimport SubNavToggleArrowLeft from './events/SubNavToggleArrowLeft';\nimport SubNavToggleArrowUp from './events/SubNavToggleArrowUp';\n\nimport OnHome from '../common/events/OnHome';\nimport OnEnd from '../common/events/OnEnd';\nimport OnEsc from '../common/events/OnEsc';\n\n/**\n * A stoggle button.\n */\nexport default class SubNavToggle {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element   The element to bind to.\n   * @param {Object|Mixed} item     The parent nav instance.\n   * @param {Object} options        Mixed meta information.\n   */\n  constructor(element, item, options) {\n    this.parentNav = item;\n    this.masterNav = item.masterNav;\n    this.toggle = element;\n    this.elem = element;\n    this.options = options;\n\n    // Assign the event dispatcher and event registry.\n    this.eventRegistry = this.createEventRegistry(options);\n    this.dispatch = new EventHandlerDispatch(element, this);\n  }\n\n  /**\n   * Creates an event registry for handling types of events.\n   *\n   * This registry is used by the EventHandlerDispatch class to bind and\n   * execute the events in the created property key.\n   *\n   * @param  {Object} options Options to merge in with the defaults.\n   *\n   * @return {Object} A key/value registry of events and handlers.\n   */\n  createEventRegistry(options) {\n\n    var registryDefaults = {\n      onClick: SubNavToggleClick,\n      onKeydownSpace: SubNavToggleSpace,\n      onKeydownEnter: SubNavToggleSpace,\n      onKeydownHome: OnHome,\n      onKeydownEnd: OnEnd,\n      onKeydownEscape: OnEsc,\n      onKeydownArrowUp: SubNavToggleArrowUp,\n      onKeydownArrowRight: SubNavToggleSpace,\n      onKeydownArrowDown: SubNavToggleArrowDown,\n      onKeydownArrowLeft: SubNavToggleArrowLeft\n    };\n\n    return Object.assign(registryDefaults, options.eventRegistry);\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * OnTab\n *\n * Event action handler class.\n */\nexport default class OnTab extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    // Only act on backwards options as we want to allow the tab to go\n    // to the toggle.\n    const shifted = event.shiftKey;\n    if (!shifted) {\n      if (!this.getElement('nextElement') && this.item.getDepth() === 1) {\n        this.masterNav.closeAllSubNavs();\n      }\n      return;\n    }\n\n    // If no previous element we are going up a level and should close\n    // up behind us.\n    let node = this.getElement('prev');\n    if (!node) {\n      this.parentNav.closeSubNav();\n    }\n  }\n}\n","import EventAbstract from '../../common/events/EventAbstract';\n\n/**\n * OnArrowRight\n *\n * Event action handler class.\n */\nexport default class OnArrowRight extends EventAbstract {\n\n  /**\n   * Execute the action to the event.\n   */\n  exec() {\n    this.item.toggleElement.focus();\n  }\n}\n","import SubNavToggle from './SubNavToggle';\n// Events\nimport EventHandlerDispatch from '../../nav/EventHandlerDispatch';\n// Keyboard events.\nimport OnHome from '../common/events/OnHome';\nimport OnEnd from '../common/events/OnEnd';\nimport OnTab from './events/OnTab';\nimport OnEsc from '../common/events/OnEsc';\nimport OnSpace from '../common/events/OnSpace';\nimport OnArrowUp from '../common/events/OnArrowUp';\nimport OnArrowRight from './events/OnArrowRight';\nimport OnArrowDown from '../common/events/OnArrowDown';\nimport OnArrowLeft from '../common/events/OnArrowLeft';\n\n/**\n * SecondarySubNavButtons Class\n *\n * A sub menu class for creating a menu with toggle button functionality.\n */\nexport default class SecondarySubNavButtons {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} element     The container wrapper for the nav.\n   * @param {Object|Mixed} masterNav  The top most level navigation.\n   * @param {Object|Mixed} parentNav  The parent navigation instance if this\n   *                                  instance is nested.\n   * @param {Object} options          A meta object of information and options.\n   */\n  constructor(element, masterNav, parentNav = null, options = {}) {\n    // Vars.\n    this.elem = element;\n    this.item = element.parentNode;\n    this.masterNav = masterNav;\n    this.parentNav = parentNav;\n    this.depth = options.depth || 1;\n\n    // Merge in defaults.\n    this.options = Object.assign({\n      itemExpandedClass: 'su-secondary-nav__item--expanded',\n      toggleClass: 'su-nav-toggle',\n      toggleLabel: 'expand menu',\n      subNavToggleText: '+'\n    }, options);\n\n    // Assign the event dispatcher and event registry.\n    this.eventRegistry = this.createEventRegistry(options);\n    this.dispatch = new EventHandlerDispatch(element, this);\n\n    // Create the toggle buttons.\n    this.toggleElement = this.createToggleButton();\n    this.item.insertBefore(this.toggleElement, this.item.querySelector('ul'));\n    this.toggle = new SubNavToggle(this.toggleElement, this, options);\n  }\n\n  /**\n   * Creates an event registry for handling types of events.\n   *\n   * This registry is used by the EventHandlerDispatch class to bind and\n   * execute the events in the created property key.\n   *\n   * @param  {Object} options Options to merge in with the defaults.\n   *\n   * @return {Object} A key/value registry of events and handlers.\n   */\n  createEventRegistry(options) {\n\n    var registryDefaults = {\n      onKeydownSpace: OnSpace,\n      onKeydownEnter: OnSpace,\n      onKeydownHome: OnHome,\n      onKeydownEnd: OnEnd,\n      onKeydownTab: OnTab,\n      onKeydownEscape: OnEsc,\n      onKeydownArrowUp: OnArrowUp,\n      onKeydownArrowRight: OnArrowRight,\n      onKeydownArrowDown: OnArrowDown,\n      onKeydownArrowLeft: OnArrowLeft\n    };\n\n    return Object.assign(registryDefaults, options.eventRegistry);\n  }\n\n  /**\n   * Create and a button for the expand/collapse actions.\n   *\n   * @return {HTMLElement} The button toggle.\n   */\n  createToggleButton() {\n    let element = document.createElement('button');\n    let label = document.createTextNode(this.options.toggleText);\n\n    // Give this instance a unique ID.\n    let id = 'toggle-' + Math.random().toString(36).substr(2, 9);\n\n    element.setAttribute('class', this.options.toggleClass);\n    element.setAttribute('aria-expanded', 'false');\n    // element.setAttribute('aria-controls', this.subNav.id);\n    element.setAttribute('aria-label', this.options.toggleLabel);\n    element.setAttribute('id', id);\n    element.appendChild(label);\n\n    return element;\n  }\n\n  /**\n   * Is this expanded? Can only return TRUE if this is a subnav trigger.\n   *\n   * @return {Boolean}\n   *  Wether or not the item is expanded.\n   */\n  isExpanded() {\n    return this.toggleElement.getAttribute('aria-expanded') === 'true';\n  }\n\n  /**\n   * Handles the opening of a sub-nav.\n   *\n   * If this is a subnav trigger, open the corresponding subnav.\n   * Optionally force focus on the first element in the subnav\n   * (for keyboard nav).\n   */\n  openSubNav() {\n    this.toggleElement.setAttribute('aria-expanded', true);\n    this.item.classList.add(this.options.itemExpandedClass);\n  }\n\n  /**\n   * Handles the closing of a subnav.\n   *\n   * If this is a subnav trigger or an item in a subnav, close the\n   * corresponding subnav. Optionally force focus on the trigger.\n   */\n  closeSubNav() {\n    this.toggleElement.setAttribute('aria-expanded', false);\n    this.item.classList.remove(this.options.itemExpandedClass);\n  }\n\n  /**\n   * Get the level of nesting for this nav.\n   *\n   * @return {Integer} The integer of depth starting at 1.\n   */\n  getDepth() {\n    return this.depth;\n  }\n\n}\n","import SecondaryNavAbstract from '../common/SecondaryNavAbstract';\nimport SecondaryNavItem from '../common/SecondaryNavItem';\nimport SecondarySubNavButtons from './SecondarySubNavButtons';\n\n/**\n * A secondary menu with toggle buttons.\n */\nexport default class SecondaryNavButtons extends SecondaryNavAbstract {\n\n  /**\n   * Initialize.\n   *\n   * @param {HTMLElement} elem  The outermost wrapper for the Navigation.\n   * @param {Object} options    An object of metadata.\n   */\n  constructor(elem, options = {}) {\n\n    // Merge with the default options.\n    options = Object.assign({\n      itemExpandedClass: 'su-secondary-nav__item--expanded',\n      toggleClass: 'su-nav-toggle',\n      toggleLabel: 'expand menu',\n      subNavToggleText: '+'\n    }, options);\n\n    // Call the super.\n    super(elem, options);\n\n    // Ok do the creation.\n    this.createSubNavItems();\n\n    // Expand the path.\n    this.activePath.expandActivePath();\n  }\n\n  /**\n   * Add the additional state handling after the abstract option has run.\n   *\n   * @param  {HTMLElement} item The HTMLElement being acted upon.\n   */\n  expandActivePathItem(item) {\n    var node = item.querySelector('.' + this.options.toggleClass);\n    if (node) {\n      node.setAttribute('aria-expanded', 'true');\n    }\n  }\n\n  /**\n   * Function for creating a new nested navigation item.\n   *\n   * @param  {HTMLElement} item     The HTMLElement to attach a new subnav to.\n   * @param  {Integer} depth        The level of nesting. (starts at 1)\n   * @param  {Object|Mixed} parent  The parent subnav instance.\n   *\n   * @return {SecondarySubNavButtons} A brand new instance.\n   */\n  newParentItem(item, depth, parent) {\n    var nav = new SecondarySubNavButtons(\n      item,\n      this,\n      parent,\n      {\n        itemExpandedClass: this.options.itemExpandedClass,\n        depth: depth\n      }\n    );\n    this.subNavItems.push(nav);\n    return nav;\n  }\n\n  /**\n   * Function for creating a new single tier navigation item.\n   *\n   * @param  {HTMLElement} item     The HTMLElement to attach a new subnav to.\n   * @param  {Integer} depth        The level of nesting. (starts at 1)\n   * @param  {Object|Mixed} parent  The parent subnav instance.\n   *\n   * @return {SecondaryNavItem} A brand new instance.\n   */\n  newNavItem(item, depth, parent) {\n    var nav = new SecondaryNavItem(\n      item,\n      this,\n      parent,\n      {depth: depth}\n    );\n    this.navItems.push(nav);\n    return nav;\n  }\n\n}\n","import '../../core/core';\nimport {secondaryNavs} from './common/globals';\nimport SecondaryNavButtons from './buttons/SecondaryNavButtons';\n\ndocument.addEventListener('DOMContentLoaded', event => {\n\n  secondaryNavs.forEach((nav, index) => {\n    if (nav.className.match(/su-secondary-nav--buttons/)) {\n      new SecondaryNavButtons(nav);\n    }\n  });\n\n});\n"],"sourceRoot":""}