<?php
namespace Stanford\Redwood;

class Redwood extends \Timber\Site {

  /******************************************************************************
   *
   * Class / Instance Variables
   *
   ******************************************************************************/

  /** @var Redwood singleton instance of this class */
  protected static $instance = NULL;

  /** @var string directory containing the (generated) assets */
  protected $asset_dir = NULL;

  /** @var string uri of the directory containing the (generated) assets */
  protected $asset_dir_uri = NULL;

  /** @var string name of the manifest file */
  protected $manifest = 'assets.json';

  /**
   * @var array asset manifest generated by webpack
   *
   * @see load_asset_manifest
   * @see enqueue_frontend_assets
   * @see enqueue_backend_assets
   */
  protected $assets = NULL;


  /******************************************************************************
   *
   * Theme setup
   *
   ******************************************************************************/

  /**
   * Initialize basic theme funtions.
   * Invoked via the init action.
   */
  public function theme_init() {

    add_post_type_support( 'page', 'excerpt' );

    add_theme_support('post-thumbnails' );
    add_theme_support('menus' );
    add_theme_support('html5', [ 'comment-list', 'comment-form', 'search-form', 'gallery', 'caption' ] );
    add_theme_support('automatic-feed-links' );
    add_theme_support('custom-header', [
        'default-image' => "%s/assets/img/banners/twilight.jpg"
      , 'width'         => 2100
      , 'height'        => 700
      , 'uploads'       => TRUE
    ] );

    register_default_headers( [
        'aerial' => [
            'url'           => "%s/assets/img/banners/aerial.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/aerial-thumb.jpg"
          , 'description'   => __( "Aerial view of Stanford campus", TEXT_DOMAIN )
        ]
      , 'convocation' => [
            'url'           => "%s/assets/img/banners/convocation.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/convocation-thumb.jpg"
          , 'description'   => __( "Convocation 2015", TEXT_DOMAIN )
        ]
      , 'fountain' => [
            'url'           => "%s/assets/img/banners/fountain.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/fountain-thumb.jpg"
          , 'description'   => __( "Terman fountain", TEXT_DOMAIN )
        ]
      , 'mcmurtry' => [
            'url'           => "%s/assets/img/banners/mcmurtry.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/mcmurtry-thumb.jpg"
          , 'description'   => __( "McMurtry Building roof garden", TEXT_DOMAIN )
        ]
      , 'oval' => [
            'url'           => "%s/assets/img/banners/oval.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/oval-thumb.jpg"
          , 'description'   => __( "The oval", TEXT_DOMAIN )
        ]
      , 'twilight' => [
            'url'           => "%s/assets/img/banners/twilight.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/twilight-thumb.jpg"
          , 'description'   => __( "Main quad at twilight", TEXT_DOMAIN )
        ]
      , 'walkway' => [
            'url'           => "%s/assets/img/banners/walkway.jpg"
          , 'thumbnail_url' => "%s/assets/img/banners/walkway-thumb.jpg"
          , 'description'   => __( "Default header image", TEXT_DOMAIN )
        ]
    ] );
  }

  /**
   * Enqueue the assets for the front end.
   * Invoked via the wp_enqueue_scripts action.
   *
   * @see load_asset_manifest
   */
  public function enqueue_frontend_assets() {
    foreach ( $this->assets[ 'user' ][ 'css' ] as $asset ) {
      wp_enqueue_style( $asset[ 'name' ], $asset[ 'uri' ], [], $asset[ 'mtime' ], FALSE );
    }
    foreach ( $this->assets[ 'user' ][ 'js' ] as $asset ) {
      wp_enqueue_script( $asset[ 'name' ], $asset[ 'uri' ], [], $asset[ 'mtime' ], TRUE );
    }
  }

  /**
   * Enqueue the assets for the back end.
   * Invoked via the admin_enqueue_scripts action.
   *
   * @see load_asset_manifest
   */
  public function enqueue_backend_assets() {
    foreach ( $this->assets[ 'admin' ][ 'css' ] as $asset ) {
      wp_enqueue_style( $asset[ 'name' ], $asset[ 'uri' ], [], $asset[ 'mtime' ], FALSE );
    }
    foreach ( $this->assets[ 'admin' ][ 'js' ] as $asset ) {
      wp_enqueue_script( $asset[ 'name' ], $asset[ 'uri' ], [], $asset[ 'mtime' ], TRUE );
    }
  }

  /**
   * Webpack generates assets with a unique hash in the filename (for cache-busting), so the
   * uri's of our .css and .js files are unpredictable. Webpack is configured to generate a
   * manifest identifying the actual filename of our assets. At startup, read this json file
   * and make note of where the various css and js files live. The files will actually be
   * enqueued when the appropriate hook is called.
   *
   * @see enqueue_frontend_assets
   * @see enqueue_backend_assets
   */
  protected function load_asset_manifest() {

    $manifest_file = $this->asset_dir . '/js/' . $this->manifest;
    $mtime = filemtime( $manifest_file );

    // FontAwesome
    // <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
    $font_awesome = [
        [
            'name' => 'fontawesome'
          , 'uri'  => 'https://use.fontawesome.com/releases/v5.8.2/css/all.css'
          , 'mtime' => NULL
        ]
      , [
            'name' => 'fontawesome-v4-shims'
          , 'uri'  => 'https://use.fontawesome.com/releases/v5.8.2/css/v4-shims.css'
          , 'mtime' => NULL
        ]
    ];
    $this->assets = [
        'admin' => [ 'css' => $font_awesome, 'js' => [] ]
      , 'user'  => [ 'css' => $font_awesome, 'js' => [] ]
    ];


    $js_dir = $this->asset_dir_uri . '/js/';
    // On WPEngine the manifest needs to be loaded over http, not https. Go figure.
    $manifest_uri = str_replace('https:', 'http:', $js_dir ) . $this->manifest;
    $assets = json_decode( file_get_contents( $manifest_uri ) );
    foreach ( $assets as $asset => $file ) {
      if ( preg_match( '/\.css$/', $asset) ) {
        $type = 'css';
      }
      elseif ( preg_match( '/\.js$/', $asset) ) {
        $type = 'js';
      }
      else {
        // don't enqueue .map files
        continue;
      }
      $role = preg_match( '/^admin\./', $asset ) ? 'admin' : 'user';
      $this->assets[ $role ][ $type ][] = [
        'name'  => $asset,
        'uri'   => str_replace( '/js/../', '/', $js_dir . $file ), // change /js/../css to /css
        'mtime' => $mtime
      ];
    }
  }

  public function register_nav_locations() {
    register_nav_menus( [
        'top'  => __( 'Top nav',  TEXT_DOMAIN )
    ] );
  }

  /**
   * Register our custom sidebars.
   * Invoked via the init action.
   */
  public function register_sidebars() {
    register_sidebar( [
        'name'          => __('Home page - left sidebar', TEXT_DOMAIN)
      , 'id'            => 'sidebar-home-first'
      , 'before_widget' => '<div class="widget %2$s">'
      , 'after_widget'  => '</div>'
      , 'before_title'  => '<h2>'
      , 'after_title'   => '</h2>'
    ] );
    register_sidebar( [
        'name'  => __('Home page - right sidebar', TEXT_DOMAIN)
      , 'id'            => 'sidebar-home-second'
      , 'before_widget' => '<div class="widget %2$s">'
      , 'after_widget'  => '</div>'
      , 'before_title'  => '<h2>'
      , 'after_title'   => '</h2>'
    ] );
    register_sidebar( [
        'name'          => __('Left sidebar', TEXT_DOMAIN)
      , 'id'            => 'sidebar-first'
      , 'before_widget' => '<div class="widget %2$s">'
      , 'after_widget'  => '</div>'
      , 'before_title'  => '<h2>'
      , 'after_title'   => '</h2>'
    ] );
    register_sidebar( [
        'name'  => __('Right sidebar', TEXT_DOMAIN)
      , 'id'            => 'sidebar-second'
      , 'before_widget' => '<div class="widget %2$s">'
      , 'after_widget'  => '</div>'
      , 'before_title'  => '<h2>'
      , 'after_title'   => '</h2>'
    ] );
    register_sidebar( [
        'name'          => __('Footer', TEXT_DOMAIN)
      , 'id'            => "fat-footer"
      , 'class'         => "row"
      , 'before_widget' => '<div class="widget %2$s">'
      , 'after_widget'  => '</div>'
      , 'before_title'  => '<h2>'
      , 'after_title'   => '</h2>'
    ] );
  }

  /**
   * Register our custom widgets.
   * Invoked via the widgets_init action.
   *
   * @since 1.0.0
   */
  public function register_widgets() {
    register_widget( new Author_Widget()     );
    register_widget( new Hero_Image_Widget() );
    register_widget( new Info_Box_Widget()   );
    register_widget( new Page_Nav_Widget()   );
    register_widget( new Social_Widget()     );
    register_widget( new Well_Widget()       );
  }

  public function note_left_nav( $classes ) {
    if ( has_nav_menu( 'left' ) ) {
      $classes[] = 'left-nav';
    }
    return $classes;
  }

  /**
   * Provide the appropriate sizes attribute for inline images.
   * Invoked via the wp_calculate_image_sizes filter.
   *
   * When this filter is invoked, we have no information about the alignment of the image,
   * so use a sizes approrpriate for the 'none' alignment, which is the largest.
   *
   * @see wp_calculate_image_sizes()
   * @see https://docs.google.com/spreadsheets/d/1S-2cjvUgsiEOkC0Rrr-VQdGw3M8A5gr5dsAUprP3hLU/edit#gid=0
   *
   * @param string       $sizes         A source size value for use in a 'sizes' attribute.
   * @param array|string $size          Requested size. Image size or array of width and height values
   *                                    in pixels (in that order).
   * @param string|null  $image_src     The URL to the image file or null.
   * @param array|null   $image_meta    The image meta data as returned by wp_get_attachment_metadata() or null.
   * @param int          $attachment_id Image attachment ID of the original image or 0.
   * @return string
   */
  public function filter_image_sizes( $sizes, $size, $image_src, $image_meta, $attachment_id ) {
    return
        '(max-width: 575px) calc(100vw - 40px), ' .
        '(max-width: 767px) calc(100vw - 60px), ' .
        '(max-width: 991px) calc((100vw - 100px) * 0.8), ' .
        '(max-width: 1199px) calc((100vw - 160px) * 0.8), ' .
        '(max-width: 1499px) calc((100vw - 200px) * 2 / 3), ' .
        '(max-width: 1699px) calc((100vw - 728px) * 7 / 12 + 288px), ' .
        '855px';
  }

  /**
   * Add wrapper around embedded video to make the player responsive.
   * Invoked via the embed_oembed_html filter.
   *
   * @param string $html generated html that embeds $url
   * @param string $url the original url that triggered WordPress to generate embed HTML
   * @param array $attr 'height' => int, 'width' => int
   * @param int $post_ID post that contains the embeded video
   * @return string $html wrapped in <div class="video-container">...</div>
   */
  public function filter_oembed_html( $html, $url, $attr, $post_ID ) {
/* Full list of embeddable urls
    $oembed = new \WP_oEmbed();
    $providers = $oembed->providers;
*/
    $media_hosts = array(
      // video
        'youtube\\.com'
      , 'youtu\\.be'
      , 'blip\\.tv'
      , 'vimeo\\.com'
      , 'dailymotion\\.com'
      , 'dai\\.ly'
      , 'flickr\\.com'
      , 'flic\\.kr'
      , 'smugmug\\.com'
      , 'hulu\\.com'
      , 'viddler\\.com'
      // audio
      , 'soundcloud\\.com'
    );
    $pattern = "(" . implode('|', $media_hosts) . ")";
    $host_matches = [];
    if ( preg_match( $pattern, $url, $host_matches ) ) {
      // if the <iframe> isn't already wrapped in a <figure>, wrap it in one
      $post = get_post( $post_ID );
      if ( strpos( $post->post_content, 'wp-block-embed' ) === FALSE ) {
        $type = strpos( $host_matches[ 0 ], 'soundcloud' ) === 0 ? 'audio' : 'video';
        $html = <<<EOFIGURE
<figure class="wp-block-embed is-type-{$type}">
  <div class="wp-block-embed__wrapper">
    {$html}
  </div>
</figure>
EOFIGURE;
      }

      // suppress related videos on YouTube
      if ( strpos( $host_matches[ 0 ], 'youtu' ) === 0 ) {
        $matches = [];
        if ( preg_match( '/ src=["\']([^"\']*)/', $html, $matches ) ) {
          $embed_url = $matches[ 1 ]; // the src attribute of the iframe is the embed version of $url
          $https_url = str_replace( 'http://', 'https://', $embed_url );
          $sep       = strpos( $embed_url, '?' ) ? '&' : '?'; // there should already be a query string, but just in case
          $html      = str_replace( $embed_url, "{$https_url}{$sep}rel=0", $html ); // append '&rel=0' to the YouTube embed url
        }
      }
    }
    return $html;
  }

  /**
   * Allow subscribers and authors to view private content
   */
  public function view_private_content() {
    if ( get_theme_mod( 'show_private_to_subscribers', FALSE ) ) {
      foreach ( [ 'subscriber', 'author' ] as $role_slug ) {
        $role = get_role( $role_slug );
        $role->add_cap( 'read_private_posts' );
        $role->add_cap( 'read_private_pages' );
      }
    }
  }

  /******************************************************************************
   *
   * Class setup
   *
   ******************************************************************************/

  /**
   * Called once when singleton instance is created.
   * Would be declared as protected to prevent using new to instantiate instances other than the singleton;
   * however our parent class, \Timber\Site, declares its constructor as public, so we're stuck with that. :(
   */
  public function __construct() {
    parent::__construct(); // invoke \Timber\Site::__construct()

    $this->asset_dir     = get_template_directory()     . '/assets/dist';
    $this->asset_dir_uri = get_template_directory_uri() . '/assets/dist';

    $this->load_asset_manifest();

    Options::init();
    Twig_Extensions::init( $this );
    Shortcodes::init();
    Utilities::init();

    add_action( 'init',                     [ $this, 'theme_init'              ] );
    add_action( 'init',                     [ $this, 'view_private_content'    ] );
    add_action( 'admin_enqueue_scripts',    [ $this, 'enqueue_backend_assets'  ] );
    add_action( 'after_setup_theme',        [ $this, 'register_nav_locations'  ] );
    add_filter( 'body_class',               [ $this, 'note_left_nav'           ] );
    add_action( 'widgets_init',             [ $this, 'register_sidebars'       ] );
    add_action( 'widgets_init',             [ $this, 'register_widgets'        ] );
    add_action( 'wp_calculate_image_sizes', [ $this, 'filter_image_sizes'      ], 10, 5 );
    add_action( 'wp_enqueue_scripts',       [ $this, 'enqueue_frontend_assets' ] );
    add_filter( 'embed_oembed_html',        [ $this, 'filter_oembed_html'      ], 10, 4 );
  }

  /**
   * Create singleton instance, if necessary.
   */
  public static function get_instance() {
    if ( !is_a( self::$instance, __CLASS__ ) ) {
      self::$instance = new Redwood();
    }
    return self::$instance;
  }

}
